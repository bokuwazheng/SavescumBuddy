<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:sys="clr-namespace:System;assembly=System.Runtime"
                    xmlns:converters="clr-namespace:SavescumBuddy.Wpf.Converters;assembly=SavescumBuddy.Wpf" 
                    xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
                    xmlns:enums="clr-namespace:SavescumBuddy.Lib.Enums;assembly=SavescumBuddy.Lib">

    <!--Main brushes-->
    <SolidColorBrush x:Key="Foreground.Static" Color="#6e6e6e"/>
    <SolidColorBrush x:Key="Foreground.Selected" Color="#3c3c3c"/>
    <SolidColorBrush x:Key="Foreground.Disabled" Color="#cdcdcd"/>
    <SolidColorBrush x:Key="Foreground.MouseOver" Color="#2d2d2d"/>
    <SolidColorBrush x:Key="Background.Selected" Color="#f5f5f5"/>
    <SolidColorBrush x:Key="Background.MouseOver" Color="#e6e6e6"/>
    <SolidColorBrush x:Key="Background.Static" Color="#FFB4B4B4"/>
    
    <!--Sorting buttons brushes-->
    <LinearGradientBrush x:Key="HeartButtonBrush" StartPoint="0,0.5" EndPoint="1,0.5">
        <GradientStop Color="#FFF7D8B2"/>
        <GradientStop Color="#FFE8ABC9" Offset="1"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="ScheduledButtonBrush" StartPoint="0,0.5" EndPoint="1,0.5">
        <GradientStop Color="#FFE8ABC9"/>
        <GradientStop Color="#FFD2ABE8" Offset="1"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="CurrentButtonBrush" StartPoint="0,0.5" EndPoint="1,0.5">
        <GradientStop Color="#FFD2ABE8"/>
        <GradientStop Color="#FFB39CDC" Offset="1"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="GroupByGameButtonBrush" StartPoint="0,0.5" EndPoint="1,0.5">
        <GradientStop Color="#FFB39CDC"/>
        <GradientStop Color="#FF6AA5EC" Offset="1"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="OrderButtonBrush" StartPoint="0,0.5" EndPoint="1,0.5">
        <GradientStop Color="#FF6AA5EC"/>
        <GradientStop Color="#FFA2D6F3" Offset="1"/>
    </LinearGradientBrush>

    <!--Font sizes-->
    <sys:Double x:Key="HeaderFontSize">22</sys:Double>
    <sys:Double x:Key="CaptionFontSize">14</sys:Double>

    <!--Converters-->
    <BorderGapMaskConverter x:Key="BorderGapMaskConverter"/>
    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
    <converters:IntToBoolConverter x:Key="IntToBoolConverter"/>
    <converters:UriToCachedImageConverter x:Key="UriToImgConverter"/>
    <converters:ExistsToVisibilityConverter x:Key="ExistsToVisibilityConverter"/>
    <converters:ObjectToBoolConverter x:Key="ObjectToBoolConverter"/>
    <converters:InverseBooleanConverter x:Key="InverseBooleanConverter"/>
    <converters:InverseBooleanToVisibilityConverter x:Key="InverseBooleanToVisibilityConverter"/>
    <converters:KeysToStringConverter x:Key="KeysToStringConverter"/>
    <converters:InverseExistsToVisibilityConverter x:Key="InverseExistsToVisibilityConverter"/>
    <converters:LongToDateTimeConverter x:Key="LongToDateTimeConverter"/>
    <converters:EnumEqualityConverter x:Key="EnumEqualityConverter"/>
    <converters:StringIsNullOrEmptyConverter x:Key="StringIsNullOrEmptyConverter"/>
    <converters:NullToVisibilityConverter x:Key="NullToVisibilityConverter"/>
    <converters:NumberToBoolConverter x:Key="NumberToBoolConverter"/>

    <Style x:Key="DialogPlaceholder" TargetType="{x:Type ContentControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <Grid>
                        <Grid Background="#7F000000">
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="MouseDown">
                                    <i:InvokeCommandAction Command="{Binding CloseDialogCommand}" CommandParameter="{x:Static enums:DialogResult.Abort}"/>
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                        </Grid>
                        <Grid VerticalAlignment="Center" HorizontalAlignment="Center">
                            <Border CornerRadius="3" Background="White">
                                <Border.Effect>
                                    <DropShadowEffect BlurRadius="30" Opacity=".3" ShadowDepth="0" Direction="0" RenderingBias="Quality"/>
                                </Border.Effect>
                            </Border>
                            <ContentPresenter/>
                        </Grid>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!--Data Grid Text Element Style-->
    <Style x:Key="TextElementStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="Margin" Value="10,0"/>
        <Setter Property="Foreground" Value="{StaticResource Foreground.Static}"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}}" Value="True">
                <Setter Property="Foreground" Value="{StaticResource Foreground.Selected}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!--Checkbox style (Simple)-->
    <Style x:Key="CheckBoxStyleSimple" TargetType="CheckBox">
        <Setter Property="Foreground" Value="{StaticResource Foreground.Static}"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Grid Background="Transparent" SnapsToDevicePixels="True">
                        <ContentPresenter 
                            Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" 
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{StaticResource Foreground.MouseOver}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--Checkbox style (Simple) ends here-->

    <!--Filter ToggleButton Style-->
    <Style x:Key="FilterToggleButton" TargetType="ToggleButton">
        <Setter Property="Foreground" Value="{StaticResource Foreground.Static}"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Background="Transparent">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{StaticResource Foreground.MouseOver}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--Header-->
    <Style x:Key="Header" TargetType="TextBlock">
        <Setter Property="FontSize" Value="{StaticResource HeaderFontSize}"/>
        <Setter Property="Foreground" Value="{StaticResource Foreground.Selected}"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>
    
    <!--Caption-->
    <Style x:Key="Caption" TargetType="TextBlock">
        <Setter Property="FontSize" Value="{StaticResource CaptionFontSize}"/>
        <Setter Property="Foreground" Value="{StaticResource Foreground.Static}"/>
    </Style>

    <!--Animations-->
    <Storyboard x:Key="Pulse" RepeatBehavior="Forever" AutoReverse="True">
        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
            <EasingColorKeyFrame KeyTime="0" Value="#80c8fa"/>
            <EasingColorKeyFrame KeyTime="0:0:0.8" Value="White">
                <EasingColorKeyFrame.EasingFunction>
                    <QuinticEase EasingMode="EaseInOut"/>
                </EasingColorKeyFrame.EasingFunction>
            </EasingColorKeyFrame>
        </ColorAnimationUsingKeyFrames>
    </Storyboard>

    <!--Record hotkey toggle button-->
    <Style x:Key="RecordHotkeyToggleButton" TargetType="ToggleButton">
        <Setter Property="Margin" Value="8"/>
        <Setter Property="Background" Value="{StaticResource Background.MouseOver}"/>
        <Setter Property="Foreground" Value="{StaticResource Foreground.Selected}"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Border Background="{TemplateBinding Background}" CornerRadius="3" BorderThickness="1">
                        <Border.Style>
                            <Style TargetType="{x:Type Border}">
                                <Setter Property="BorderBrush" Value="Transparent"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding IsChecked, RelativeSource={RelativeSource AncestorType={x:Type ToggleButton}}}" Value="True">
                                        <Setter Property="BorderBrush" Value="White"/>
                                        <DataTrigger.EnterActions>
                                            <BeginStoryboard Storyboard="{StaticResource Pulse}"/>
                                        </DataTrigger.EnterActions>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Border.Style>
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Background" Value="#edf1f7"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Text Button Style-->
    <Style x:Key="TextButton" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{StaticResource Foreground.Static}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}" CornerRadius="3">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <!--<Setter Property="Background" Value="{StaticResource Background.Selected}"/>-->
                <Setter Property="Foreground" Value="{StaticResource Foreground.MouseOver}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{StaticResource Foreground.Disabled}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

</ResourceDictionary>