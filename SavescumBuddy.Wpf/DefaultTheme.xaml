<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:sys="clr-namespace:System;assembly=System.Runtime"
                    xmlns:converters="clr-namespace:SavescumBuddy.Wpf.Converters;assembly=SavescumBuddy.Wpf" 
                    xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
                    xmlns:enums="clr-namespace:SavescumBuddy.Lib.Enums;assembly=SavescumBuddy.Lib">
    
    <!--Sorting buttons brushes-->
    <LinearGradientBrush x:Key="HeartButtonBrush" StartPoint="0,0.5" EndPoint="1,0.5">
        <GradientStop Color="#FFF7D8B2"/>
        <GradientStop Color="#FFE8ABC9" Offset="1"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="AutobackupsButtonBrush" StartPoint="0,0.5" EndPoint="1,0.5">
        <GradientStop Color="#FFE8ABC9"/>
        <GradientStop Color="#FFD2ABE8" Offset="1"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="CurrentButtonBrush" StartPoint="0,0.5" EndPoint="1,0.5">
        <GradientStop Color="#FFD2ABE8"/>
        <GradientStop Color="#FFB39CDC" Offset="1"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="GroupByGameButtonBrush" StartPoint="0,0.5" EndPoint="1,0.5">
        <GradientStop Color="#FFB39CDC"/>
        <GradientStop Color="#FF6AA5EC" Offset="1"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="OrderButtonBrush" StartPoint="0,0.5" EndPoint="1,0.5">
        <GradientStop Color="#FF6AA5EC"/>
        <GradientStop Color="#FFA2D6F3" Offset="1"/>
    </LinearGradientBrush>

    <!--Font sizes-->
    <sys:Double x:Key="HeaderFontSize">22</sys:Double>
    <sys:Double x:Key="CaptionFontSize">14</sys:Double>
    <sys:Double x:Key="СommonFontSize">12</sys:Double>

    <!--Converters-->
    <BorderGapMaskConverter x:Key="BorderGapMaskConverter"/>
    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
    <converters:IntToBoolConverter x:Key="IntToBoolConverter"/>
    <converters:UriToCachedImageConverter x:Key="UriToImgConverter"/>
    <converters:ExistsToVisibilityConverter x:Key="ExistsToVisibilityConverter"/>
    <converters:ObjectToBoolConverter x:Key="ObjectToBoolConverter"/>
    <converters:InverseBooleanConverter x:Key="InverseBooleanConverter"/>
    <converters:InverseBooleanToVisibilityConverter x:Key="InverseBooleanToVisibilityConverter"/>
    <converters:KeysToStringConverter x:Key="KeysToStringConverter"/>
    <converters:InverseExistsToVisibilityConverter x:Key="InverseExistsToVisibilityConverter"/>
    <converters:LongToDateTimeConverter x:Key="LongToDateTimeConverter"/>
    <converters:EnumEqualityConverter x:Key="EnumEqualityConverter"/>
    <converters:StringIsNullOrEmptyConverter x:Key="StringIsNullOrEmptyConverter"/>
    <converters:NullToVisibilityConverter x:Key="NullToVisibilityConverter"/>
    <converters:NumberToBoolConverter x:Key="NumberToBoolConverter"/>

    <!--Main brushes-->
    <SolidColorBrush x:Key="Dark" Color="#FF464646"/>
    <SolidColorBrush x:Key="Ash" Color="#FF7D7D7D"/>
    <SolidColorBrush x:Key="Grayish" Color="#FFB4B4B4"/>
    <SolidColorBrush x:Key="Bright" Color="#FFE6E6E6"/>
    <SolidColorBrush x:Key="SkyBlue" Color="#FF80C8FA"/>
    <SolidColorBrush x:Key="SkyBlueInteraction" Color="#FF46A8EE"/>
    <SolidColorBrush x:Key="SomeGreen" Color="#FF1DB01D"/>
    <SolidColorBrush x:Key="Foreground.Static" Color="#6e6e6e"/>
    <SolidColorBrush x:Key="Foreground.Selected" Color="#3c3c3c"/>
    <SolidColorBrush x:Key="Foreground.Disabled" Color="#cdcdcd"/>
    <SolidColorBrush x:Key="Foreground.MouseOver" Color="#2d2d2d"/>
    <SolidColorBrush x:Key="Background.Selected" Color="#f5f5f5"/>
    <SolidColorBrush x:Key="Background.MouseOver" Color="#e6e6e6"/>

    <Style x:Key="DialogPlaceholder" TargetType="{x:Type ContentControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <Grid>
                        <Grid Background="#7F000000">
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="MouseDown">
                                    <i:InvokeCommandAction Command="{Binding CloseDialogCommand}" CommandParameter="{x:Static enums:DialogResult.Abort}"/>
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                        </Grid>
                        <Grid VerticalAlignment="Center" HorizontalAlignment="Center">
                            <Border CornerRadius="3" Background="White">
                                <Border.Effect>
                                    <DropShadowEffect BlurRadius="30" Opacity=".3" ShadowDepth="0" Direction="0" RenderingBias="Quality"/>
                                </Border.Effect>
                            </Border>
                            <ContentPresenter/>
                        </Grid>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!--Data Grid Text Element Style-->
    <Style x:Key="TextElementStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="Margin" Value="10,0"/>
        <Setter Property="Foreground" Value="{StaticResource Foreground.Static}"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}}" Value="True">
                <Setter Property="Foreground" Value="{StaticResource Foreground.Selected}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!--Checkbox style (Simple)-->
    <Style x:Key="CheckBoxStyleSimple" TargetType="CheckBox">
        <Setter Property="Foreground" Value="{StaticResource Foreground.Static}"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Grid Background="Transparent" SnapsToDevicePixels="True">
                        <ContentPresenter 
                            Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" 
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{StaticResource Foreground.MouseOver}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--Checkbox style (Simple) ends here-->

    <Style x:Key="DefaultDataGridStyle" TargetType="{x:Type DataGrid}">
        <Setter Property="CanUserAddRows" Value="False"/>
        <Setter Property="CanUserDeleteRows" Value="False"/>
        <Setter Property="CanUserReorderColumns" Value="False"/>
        <Setter Property="CanUserSortColumns" Value="False"/>
        <Setter Property="IsReadOnly" Value="True"/>
        <Setter Property="AutoGenerateColumns" Value="False"/>
        <Setter Property="EnableRowVirtualization" Value="True"/>
        <Setter Property="EnableColumnVirtualization" Value="True"/>
        <Setter Property="HeadersVisibility" Value="None"/>
        <Setter Property="SelectionMode" Value="Single"/>
        <Setter Property="SelectionUnit" Value="FullRow"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="HorizontalScrollBarVisibility" Value="Hidden"/>
        <Setter Property="GridLinesVisibility" Value="Horizontal"/>
        <Setter Property="HorizontalGridLinesBrush" Value="{StaticResource Bright}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="CellStyle">
            <Setter.Value>
                <Style TargetType="{x:Type DataGridCell}">
                    <Style.Triggers>
                        <Trigger Property="DataGridCell.IsSelected" Value="True">
                            <Setter Property="BorderBrush" Value="{StaticResource Background.Selected}"/>
                            <Setter Property="Background" Value="{StaticResource Background.Selected}"/>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="GroupBoxStyle1" TargetType="{x:Type GroupBox}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GroupBox}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="6"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="6"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="6"/>
                        </Grid.RowDefinitions>
                        <Border Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="4" Grid.ColumnSpan="4" Grid.Column="0" Grid.RowSpan="3" Grid.Row="1"/>
                        <Border BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="Transparent" CornerRadius="4" Grid.ColumnSpan="4" Grid.RowSpan="3" Grid.Row="1">
                            <Border.OpacityMask>
                                <MultiBinding Converter="{StaticResource BorderGapMaskConverter}" ConverterParameter="7">
                                    <Binding ElementName="Header" Path="ActualWidth"/>
                                    <Binding Path="ActualWidth" RelativeSource="{RelativeSource Self}"/>
                                    <Binding Path="ActualHeight" RelativeSource="{RelativeSource Self}"/>
                                </MultiBinding>
                            </Border.OpacityMask>
                            <Border BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="3"/>
                        </Border>
                        <Border x:Name="Header" Grid.Column="1" Padding="3,0" Grid.RowSpan="2" Grid.Row="0">
                            <ContentPresenter ContentSource="Header" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Border>
                        <ContentPresenter Grid.ColumnSpan="2" Grid.Column="1" Margin="{TemplateBinding Padding}" Grid.Row="2" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!--Expander style-->
    <SolidColorBrush x:Key="Expander.MouseOver.Circle.Stroke" Color="#FF5593FF"/>
    <SolidColorBrush x:Key="Expander.MouseOver.Circle.Fill" Color="#FFF3F9FF"/>
    <SolidColorBrush x:Key="Expander.MouseOver.Arrow.Stroke" Color="#FF000000"/>
    <SolidColorBrush x:Key="Expander.Pressed.Circle.Stroke" Color="#FF3C77DD"/>
    <SolidColorBrush x:Key="Expander.Pressed.Circle.Fill" Color="#FFD9ECFF"/>
    <SolidColorBrush x:Key="Expander.Pressed.Arrow.Stroke" Color="#FF000000"/>
    <SolidColorBrush x:Key="Expander.Disabled.Circle.Stroke" Color="#FFBCBCBC"/>
    <SolidColorBrush x:Key="Expander.Disabled.Circle.Fill" Color="#FFE6E6E6"/>
    <SolidColorBrush x:Key="Expander.Disabled.Arrow.Stroke" Color="#FF707070"/>
    <SolidColorBrush x:Key="Expander.Static.Circle.Fill" Color="#FFFFFFFF"/>
    <SolidColorBrush x:Key="Expander.Static.Circle.Stroke" Color="#FF333333"/>
    <SolidColorBrush x:Key="Expander.Static.Arrow.Stroke" Color="#FF464646"/>
    <Style x:Key="ExpanderDownHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid Background="Transparent" SnapsToDevicePixels="False">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="19"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Ellipse x:Name="circle" Fill="Transparent" HorizontalAlignment="Center" Height="10" Stroke="Transparent" VerticalAlignment="Center" Width="10"/>
                            <Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" SnapsToDevicePixels="false" Stroke="{StaticResource Expander.Static.Arrow.Stroke}" StrokeThickness="2" VerticalAlignment="Center"/>
                            <ContentPresenter Grid.Column="1" HorizontalAlignment="Left" Margin="4,0,0,0" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Center"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Stroke" TargetName="circle" Value="Transparent"/>
                            <Setter Property="Fill" TargetName="circle" Value="Transparent"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.MouseOver.Arrow.Stroke}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Stroke" TargetName="circle" Value="Transparent"/>
                            <Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
                            <Setter Property="Fill" TargetName="circle" Value="Transparent"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Pressed.Arrow.Stroke}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Stroke}"/>
                            <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Fill}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Disabled.Arrow.Stroke}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Type Expander}" TargetType="Expander">
        <Setter Property="Foreground" Value="#FF969696"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="3" SnapsToDevicePixels="true">
                        <DockPanel>
                            <ToggleButton x:Name="HeaderSite" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" Content="{TemplateBinding Header}" DockPanel.Dock="Top" Foreground="{TemplateBinding Foreground}" FontWeight="{TemplateBinding FontWeight}" FontStyle="{TemplateBinding FontStyle}" FontStretch="{TemplateBinding FontStretch}" FontSize="{StaticResource CaptionFontSize}" FontFamily="{TemplateBinding FontFamily}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" MinWidth="0" MinHeight="0" Padding="{TemplateBinding Padding}" Style="{StaticResource ExpanderDownHeaderStyle}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            <ContentPresenter x:Name="ExpandSite" DockPanel.Dock="Bottom" Focusable="false" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" Visibility="Collapsed" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="true">
                            <Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <SolidColorBrush x:Key="OptionMark.Static.Background" Color="#FFFFFFFF"/>
    <SolidColorBrush x:Key="OptionMark.Static.Border" Color="#FF707070"/>
    <Style x:Key="OptionMarkFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="14,0,0,0" SnapsToDevicePixels="True" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--Expander style (end)-->

    <!--ComboBox Style Flat-->
    <Style x:Key="ComboBoxToggleButton" TargetType="ToggleButton">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition/>
                            <ColumnDefinition Width="32"/>
                        </Grid.ColumnDefinitions>
                        <GroupBox Style="{StaticResource GroupBoxStyle1}" Header="{Binding Tag, RelativeSource={RelativeSource AncestorType=ComboBox}}" Background="{TemplateBinding Background}" 
                                  Foreground="{TemplateBinding BorderBrush}" FontSize="12" Grid.ColumnSpan="2" Height="{TemplateBinding Height}"
                                  BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"/>
                        <Path x:Name="Arrow" Grid.Column="1" Fill="Transparent" Stroke="{TemplateBinding Foreground}" StrokeThickness="2" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M 1,1.5 L 4.5,5 L 8,1.5"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="ComboBoxTextBox" TargetType="TextBox">
        <Border x:Name="PART_ContentHost" Focusable="True" />
    </ControlTemplate>
    <Style x:Key="ComboBoxStyleWithPlaceholder" TargetType="ComboBox">
        <Setter Property="Foreground" Value="{StaticResource Ash}" />
        <Setter Property="BorderBrush" Value="Black"/>
        <Setter Property="Background" Value="White" />
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Height" Value="49"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBox">
                    <Grid>
                        <ToggleButton Cursor="Hand" Name="ToggleButton" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" Foreground="{TemplateBinding Foreground}" Height="{TemplateBinding Height}"
                            Style="{StaticResource ComboBoxToggleButton}" Grid.Column="2" Focusable="False" IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press"/>
                        <ContentPresenter Name="ContentSite" IsHitTestVisible="False" Content="{TemplateBinding SelectionBoxItem}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" 
                            ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" Margin="10,3,30,3" VerticalAlignment="Center" HorizontalAlignment="Left" />
                        <TextBox x:Name="PART_EditableTextBox" Style="{x:Null}" Template="{StaticResource ComboBoxTextBox}" HorizontalAlignment="Left" VerticalAlignment="Center"
                            Margin="3,3,23,3" Focusable="True" Visibility="Hidden" IsReadOnly="{TemplateBinding IsReadOnly}"/>
                        <Popup Name="Popup" Placement="Bottom" IsOpen="{TemplateBinding IsDropDownOpen}" AllowsTransparency="True" Focusable="False" PopupAnimation="Slide">
                            <Grid Name="DropDown" SnapsToDevicePixels="True" MinWidth="{TemplateBinding ActualWidth}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                <Border CornerRadius="7" x:Name="DropDownBorder" Background="White" BorderThickness="1" BorderBrush="#FFE1E1E1"/>
                                <ScrollViewer Margin="1,10,1,10" SnapsToDevicePixels="True">
                                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95"/>
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </Trigger>
                        <Trigger Property="IsEditable" Value="true">
                            <Setter Property="IsTabStop" Value="false"/>
                            <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
        </Style.Triggers>
    </Style>
    <Style x:Key="{x:Type ComboBoxItem}" TargetType="ComboBoxItem">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="FontSize" Value="{StaticResource СommonFontSize}" />
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBoxItem">
                    <Border Name="Border" Padding="5" Margin="0" BorderThickness="0" CornerRadius="0" Background="Transparent" BorderBrush="Red">
                        <TextBlock TextAlignment="Left">
                            <ContentPresenter />
                        </TextBlock>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsHighlighted" Value="True">
                            <Setter TargetName="Border" Property="BorderBrush" Value="#FFF5F5F5"/>
                            <Setter TargetName="Border" Property="Background" Value="#FFF5F5F5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--ComboBox Style Flat (end)-->

    <!--ToolTip style (GLOBAL)-->
    <Style x:Key="{x:Type ToolTip}" TargetType="ToolTip">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="FontFamily" Value="Segoe UI"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToolTip">
                    <Border Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" 
                        Background="#6a6a6a" BorderThickness="0" CornerRadius="3" SnapsToDevicePixels="True">
                        <ContentPresenter Margin="12,10" HorizontalAlignment="Left" VerticalAlignment="Top"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--ListView style-->
    <SolidColorBrush x:Key="SelectedBackgroundBrush" Color="#FFF0F0F0"/>
    <SolidColorBrush x:Key="DisabledForegroundBrush" Color="#888"/>
    <SolidColorBrush x:Key="SelectedItemBrush" Color="WhiteSmoke"/>
    <Style x:Key="{x:Type ListViewItem}" TargetType="ListViewItem">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBoxItem">
                    <Border Name="Border" Padding="2" SnapsToDevicePixels="true" Background="Transparent">
                        <ContentPresenter HorizontalAlignment="Left"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource SelectedItemBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Button style-->
    <Style x:Key="defaultbuttonstyle123" TargetType="Button">
        <Setter Property="Foreground" Value="{StaticResource Dark}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding Foreground}" CornerRadius="3">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Button.IsMouseOver"  Value="True">
                <Setter Property="Foreground" Value="#FF3FA0E4"/>
            </Trigger>
            <Trigger Property="Button.IsPressed"  Value="True">
                <Setter Property="Foreground" Value="Black"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--Filter ToggleButton Style-->
    <Style x:Key="FilterToggleButton" TargetType="ToggleButton">
        <Setter Property="Foreground" Value="{StaticResource Foreground.Static}"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Background="Transparent">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{StaticResource Foreground.MouseOver}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--TextBox Style Flat-->
    <Style x:Key="TextBoxStyleFlat" TargetType="{x:Type TextBox}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True" CornerRadius="3">
                        <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="Transparent"/>
                            <Setter Property="Background" TargetName="border" Value="Transparent"/>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="Transparent"/>
                            <Setter Property="Background" TargetName="border" Value="Transparent"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--TextBlock Style-->
    <!--Header-->
    <Style x:Key="Header" TargetType="TextBlock">
        <Setter Property="FontSize" Value="{StaticResource HeaderFontSize}"/>
        <Setter Property="Foreground" Value="{StaticResource Dark}"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>
    <!--Caption-->
    <Style x:Key="Caption" TargetType="TextBlock">
        <Setter Property="FontSize" Value="{StaticResource CaptionFontSize}"/>
        <Setter Property="Foreground" Value="{StaticResource Ash}"/>
    </Style>

    <!--Animations-->
    <Storyboard x:Key="Pulse" RepeatBehavior="Forever" AutoReverse="True">
        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
            <EasingColorKeyFrame KeyTime="0" Value="#80c8fa"/>
            <EasingColorKeyFrame KeyTime="0:0:0.8" Value="White">
                <EasingColorKeyFrame.EasingFunction>
                    <QuinticEase EasingMode="EaseInOut"/>
                </EasingColorKeyFrame.EasingFunction>
            </EasingColorKeyFrame>
        </ColorAnimationUsingKeyFrames>
    </Storyboard>

    <Storyboard x:Key="Loading">
        <DoubleAnimationUsingKeyFrames
                Storyboard.TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)" 
                RepeatBehavior="1x">
            <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
            <EasingDoubleKeyFrame KeyTime="0:0:1" Value="360">
                <EasingDoubleKeyFrame.EasingFunction>
                    <QuinticEase EasingMode="EaseOut"/>
                </EasingDoubleKeyFrame.EasingFunction>
            </EasingDoubleKeyFrame>
        </DoubleAnimationUsingKeyFrames>
        <BooleanAnimationUsingKeyFrames Storyboard.TargetProperty="IsEnabled">
            <DiscreteBooleanKeyFrame KeyTime="00:00:00" Value="False"/>
            <DiscreteBooleanKeyFrame KeyTime="00:00:01" Value="True"/>
        </BooleanAnimationUsingKeyFrames>
    </Storyboard>

    <Storyboard x:Key="ToggleOn">
        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Canvas.Left)" RepeatBehavior="1x">
            <EasingDoubleKeyFrame KeyTime="0" Value="3"/>
            <EasingDoubleKeyFrame KeyTime="0:0:0.4" Value="20">
                <EasingDoubleKeyFrame.EasingFunction>
                    <QuinticEase EasingMode="EaseOut"/>
                </EasingDoubleKeyFrame.EasingFunction>
            </EasingDoubleKeyFrame>
        </DoubleAnimationUsingKeyFrames>
    </Storyboard>

    <Storyboard x:Key="ToggleOff">
        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Canvas.Left)" RepeatBehavior="1x">
            <EasingDoubleKeyFrame KeyTime="0" Value="20"/>
            <EasingDoubleKeyFrame KeyTime="0:0:0.4" Value="3">
                <EasingDoubleKeyFrame.EasingFunction>
                    <QuinticEase EasingMode="EaseOut"/>
                </EasingDoubleKeyFrame.EasingFunction>
            </EasingDoubleKeyFrame>
        </DoubleAnimationUsingKeyFrames>
    </Storyboard>

    <Storyboard x:Key="Appear">
        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" RepeatBehavior="1x">
            <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
            <EasingDoubleKeyFrame KeyTime="0:0:1" Value="100">
                <EasingDoubleKeyFrame.EasingFunction>
                    <QuinticEase EasingMode="EaseInOut"/>
                </EasingDoubleKeyFrame.EasingFunction>
            </EasingDoubleKeyFrame>
        </DoubleAnimationUsingKeyFrames>
    </Storyboard>

    <Storyboard x:Key="Disappear">
        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" RepeatBehavior="1x">
            <EasingDoubleKeyFrame KeyTime="0" Value="100"/>
            <EasingDoubleKeyFrame KeyTime="0:0:.8" Value="0">
                <EasingDoubleKeyFrame.EasingFunction>
                    <QuinticEase EasingMode="EaseInOut"/>
                </EasingDoubleKeyFrame.EasingFunction>
            </EasingDoubleKeyFrame>
        </DoubleAnimationUsingKeyFrames>
        <ColorAnimation To="White" BeginTime="0" Duration="0" Storyboard.TargetProperty="(Grid.Background).(SolidColorBrush.Color)"/>
    </Storyboard>

    <Style x:Key="Curtain" TargetType="Grid">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="IsHitTestVisible" Value="False"/>
        <Style.Triggers>
            <EventTrigger RoutedEvent="Loaded">
                <BeginStoryboard Storyboard="{StaticResource Disappear}"/>
            </EventTrigger>
        </Style.Triggers>
    </Style>

    <!--Sliding toggle button-->
    <Style x:Key="SlidingToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="Height" Value="22"/>
        <Setter Property="Width" Value="42"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid>
                        <!--Track-->
                        <Border CornerRadius="8" Width="34" Height="16" BorderThickness="0" Margin="4,0">
                            <Border.Style>
                                <Style TargetType="Border">
                                    <Setter Property="Background" Value="{StaticResource Grayish}"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding IsChecked, RelativeSource={RelativeSource AncestorType=ToggleButton}}" Value="True">
                                            <Setter Property="Background" Value="{StaticResource SkyBlue}"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Border.Style>
                        </Border>
                        <Canvas Width="38" Height="22" Background="Transparent">
                            <!--Thumb-->
                            <Border Width="22" Height="22" CornerRadius="11" Background="White" BorderThickness="2">
                                <Border.Style>
                                    <Style TargetType="{x:Type Border}">
                                        <Setter Property="BorderBrush" Value="{StaticResource Grayish}"/>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding IsChecked, RelativeSource={RelativeSource AncestorType=ToggleButton}}" Value="True">
                                                <Setter Property="BorderBrush" Value="{StaticResource SkyBlue}"/>
                                                <DataTrigger.EnterActions>
                                                    <BeginStoryboard>
                                                        <Storyboard>
                                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Canvas.Left)" RepeatBehavior="1x">
                                                                <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                                <EasingDoubleKeyFrame KeyTime="0:0:0.4" Value="16">
                                                                    <EasingDoubleKeyFrame.EasingFunction>
                                                                        <QuinticEase EasingMode="EaseOut"/>
                                                                    </EasingDoubleKeyFrame.EasingFunction>
                                                                </EasingDoubleKeyFrame>
                                                            </DoubleAnimationUsingKeyFrames>
                                                        </Storyboard>
                                                    </BeginStoryboard>
                                                </DataTrigger.EnterActions>
                                                <DataTrigger.ExitActions>
                                                    <BeginStoryboard>
                                                        <Storyboard>
                                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Canvas.Left)" RepeatBehavior="1x">
                                                                <EasingDoubleKeyFrame KeyTime="0" Value="16"/>
                                                                <EasingDoubleKeyFrame KeyTime="0:0:0.4" Value="0">
                                                                    <EasingDoubleKeyFrame.EasingFunction>
                                                                        <QuinticEase EasingMode="EaseOut"/>
                                                                    </EasingDoubleKeyFrame.EasingFunction>
                                                                </EasingDoubleKeyFrame>
                                                            </DoubleAnimationUsingKeyFrames>
                                                        </Storyboard>
                                                    </BeginStoryboard>
                                                </DataTrigger.ExitActions>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </Border.Style>
                            </Border>
                        </Canvas>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--Sliding toggle button ends here-->

    <!--Record hotkey toggle button-->
    <Style x:Key="RecordHotkeyToggleButton" TargetType="ToggleButton">
        <Setter Property="Margin" Value="8"/>
        <Setter Property="Background" Value="{StaticResource Bright}"/>
        <Setter Property="Foreground" Value="{StaticResource Dark}"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Border Background="{TemplateBinding Background}" CornerRadius="3" BorderThickness="1">
                        <Border.Style>
                            <Style TargetType="{x:Type Border}">
                                <Setter Property="BorderBrush" Value="Transparent"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding IsChecked, RelativeSource={RelativeSource AncestorType={x:Type ToggleButton}}}" Value="True">
                                        <Setter Property="BorderBrush" Value="White"/>
                                        <DataTrigger.EnterActions>
                                            <BeginStoryboard Storyboard="{StaticResource Pulse}"/>
                                        </DataTrigger.EnterActions>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Border.Style>
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Background" Value="#edf1f7"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Text Button Style-->
    <Style x:Key="TextButton" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{StaticResource Foreground.Static}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}" CornerRadius="3">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <!--<Setter Property="Background" Value="{StaticResource Background.Selected}"/>-->
                <Setter Property="Foreground" Value="{StaticResource Foreground.MouseOver}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{StaticResource Foreground.Disabled}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--Validation-->
    <ControlTemplate x:Key="ValidationTemplate">
        <StackPanel Orientation="Vertical">
            <AdornedElementPlaceholder x:Name="placeholder"/>
            <TextBlock Foreground="#E20944" FontSize="12" Margin="5,0,0,0">
                <Run Text="&#xEB90;" FontFamily="Segoe MDL2 Assets" FontSize="10"/>
                <Run Text="{Binding ElementName=placeholder, Path=AdornedElement.(Validation.Errors)[0].ErrorContent}"/>
            </TextBlock>
        </StackPanel>
    </ControlTemplate>

    <!--Context menu style-->
    <Style x:Key="ContextMenuStyle" TargetType="ContextMenu">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContextMenu}">
                    <Grid>
                        <Border x:Name="Border" Background="White" CornerRadius="3" BorderThickness="0" Margin="16">
                            <Border.Effect>
                                <DropShadowEffect BlurRadius="16" Opacity=".5" ShadowDepth="0" Direction="0" RenderingBias="Quality"/>
                            </Border.Effect>
                            <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" Margin="0,2"/>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Menu item style (Button)-->
    <Style x:Key="MenuItemStyleButton" TargetType="MenuItem">
        <Setter Property="Margin" Value="0"/>
        <Setter Property="FontWeight" Value="Medium"/>
        <Setter Property="Foreground" Value="{StaticResource Foreground.Static}"/>
        <Setter Property="Background" Value="White"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <Border x:Name="templateRoot" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Height="34" SnapsToDevicePixels="true">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="50"/>
                                <ColumnDefinition Width="4"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <ContentPresenter x:Name="Icon" ContentSource="Icon" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            <ContentPresenter x:Name="menuHeaderContainer" ContentSource="Header" Grid.Column="2" HorizontalAlignment="Left" Margin="0,0,20,0" RecognizesAccessKey="True" VerticalAlignment="Center"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsHighlighted" Value="True">
                            <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource Background.MouseOver}"/>
                            <Setter Property="Foreground" Value="{StaticResource Foreground.Selected}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="{StaticResource Foreground.Disabled}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--Menu item style (Button) ends here-->

    <Style x:Key="TextBoxStyle3" TargetType="{x:Type TextBox}">
        <Setter Property="Background" Value="White"/>
        <Setter Property="BorderBrush" Value="{StaticResource Ash}"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <GroupBox Style="{StaticResource GroupBoxStyle1}" Header="{TemplateBinding Tag}" Background="{TemplateBinding Background}" 
                              Foreground="{TemplateBinding BorderBrush}" FontSize="12"
                              BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Height="{TemplateBinding Height}">
                        <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"
                                      Grid.ColumnSpan="2" Grid.Column="1" Margin="{TemplateBinding Padding}" Grid.Row="2"/>
                    </GroupBox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="BorderBrush" Value="CornflowerBlue"/>
            </Trigger>
        </Style.Triggers>
    </Style>

</ResourceDictionary>